/**
 */
package model.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.LexikalischFunktionaleGrammatik} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LexikalischFunktionaleGrammatikItemProvider lexikalischFunktionaleGrammatikItemProvider;

	/**
	 * This creates an adapter for a {@link model.LexikalischFunktionaleGrammatik}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLexikalischFunktionaleGrammatikAdapter() {
		if (lexikalischFunktionaleGrammatikItemProvider == null) {
			lexikalischFunktionaleGrammatikItemProvider = new LexikalischFunktionaleGrammatikItemProvider(this);
		}

		return lexikalischFunktionaleGrammatikItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.FStruktur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FStrukturItemProvider fStrukturItemProvider;

	/**
	 * This creates an adapter for a {@link model.FStruktur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFStrukturAdapter() {
		if (fStrukturItemProvider == null) {
			fStrukturItemProvider = new FStrukturItemProvider(this);
		}

		return fStrukturItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Grammatik} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrammatikItemProvider grammatikItemProvider;

	/**
	 * This creates an adapter for a {@link model.Grammatik}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGrammatikAdapter() {
		if (grammatikItemProvider == null) {
			grammatikItemProvider = new GrammatikItemProvider(this);
		}

		return grammatikItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Lexikon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LexikonItemProvider lexikonItemProvider;

	/**
	 * This creates an adapter for a {@link model.Lexikon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLexikonAdapter() {
		if (lexikonItemProvider == null) {
			lexikonItemProvider = new LexikonItemProvider(this);
		}

		return lexikonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.LexikonEintrag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LexikonEintragItemProvider lexikonEintragItemProvider;

	/**
	 * This creates an adapter for a {@link model.LexikonEintrag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLexikonEintragAdapter() {
		if (lexikonEintragItemProvider == null) {
			lexikonEintragItemProvider = new LexikonEintragItemProvider(this);
		}

		return lexikonEintragItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AttributWertePaar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributWertePaarItemProvider attributWertePaarItemProvider;

	/**
	 * This creates an adapter for a {@link model.AttributWertePaar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributWertePaarAdapter() {
		if (attributWertePaarItemProvider == null) {
			attributWertePaarItemProvider = new AttributWertePaarItemProvider(this);
		}

		return attributWertePaarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Funktion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunktionItemProvider funktionItemProvider;

	/**
	 * This creates an adapter for a {@link model.Funktion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunktionAdapter() {
		if (funktionItemProvider == null) {
			funktionItemProvider = new FunktionItemProvider(this);
		}

		return funktionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Merkmal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MerkmalItemProvider merkmalItemProvider;

	/**
	 * This creates an adapter for a {@link model.Merkmal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMerkmalAdapter() {
		if (merkmalItemProvider == null) {
			merkmalItemProvider = new MerkmalItemProvider(this);
		}

		return merkmalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Terminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalItemProvider terminalItemProvider;

	/**
	 * This creates an adapter for a {@link model.Terminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminalAdapter() {
		if (terminalItemProvider == null) {
			terminalItemProvider = new TerminalItemProvider(this);
		}

		return terminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Nichterminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NichterminalItemProvider nichterminalItemProvider;

	/**
	 * This creates an adapter for a {@link model.Nichterminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNichterminalAdapter() {
		if (nichterminalItemProvider == null) {
			nichterminalItemProvider = new NichterminalItemProvider(this);
		}

		return nichterminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AbleitungsRegel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbleitungsRegelItemProvider ableitungsRegelItemProvider;

	/**
	 * This creates an adapter for a {@link model.AbleitungsRegel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbleitungsRegelAdapter() {
		if (ableitungsRegelItemProvider == null) {
			ableitungsRegelItemProvider = new AbleitungsRegelItemProvider(this);
		}

		return ableitungsRegelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TerminalNichtTerminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalNichtTerminalItemProvider terminalNichtTerminalItemProvider;

	/**
	 * This creates an adapter for a {@link model.TerminalNichtTerminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminalNichtTerminalAdapter() {
		if (terminalNichtTerminalItemProvider == null) {
			terminalNichtTerminalItemProvider = new TerminalNichtTerminalItemProvider(this);
		}

		return terminalNichtTerminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AnnotiertesTerminalNichtTerminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotiertesTerminalNichtTerminalItemProvider annotiertesTerminalNichtTerminalItemProvider;

	/**
	 * This creates an adapter for a {@link model.AnnotiertesTerminalNichtTerminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotiertesTerminalNichtTerminalAdapter() {
		if (annotiertesTerminalNichtTerminalItemProvider == null) {
			annotiertesTerminalNichtTerminalItemProvider = new AnnotiertesTerminalNichtTerminalItemProvider(this);
		}

		return annotiertesTerminalNichtTerminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.MerkmalFunktion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MerkmalFunktionItemProvider merkmalFunktionItemProvider;

	/**
	 * This creates an adapter for a {@link model.MerkmalFunktion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMerkmalFunktionAdapter() {
		if (merkmalFunktionItemProvider == null) {
			merkmalFunktionItemProvider = new MerkmalFunktionItemProvider(this);
		}

		return merkmalFunktionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (lexikalischFunktionaleGrammatikItemProvider != null) lexikalischFunktionaleGrammatikItemProvider.dispose();
		if (fStrukturItemProvider != null) fStrukturItemProvider.dispose();
		if (grammatikItemProvider != null) grammatikItemProvider.dispose();
		if (lexikonItemProvider != null) lexikonItemProvider.dispose();
		if (lexikonEintragItemProvider != null) lexikonEintragItemProvider.dispose();
		if (attributWertePaarItemProvider != null) attributWertePaarItemProvider.dispose();
		if (funktionItemProvider != null) funktionItemProvider.dispose();
		if (merkmalItemProvider != null) merkmalItemProvider.dispose();
		if (terminalItemProvider != null) terminalItemProvider.dispose();
		if (nichterminalItemProvider != null) nichterminalItemProvider.dispose();
		if (ableitungsRegelItemProvider != null) ableitungsRegelItemProvider.dispose();
		if (terminalNichtTerminalItemProvider != null) terminalNichtTerminalItemProvider.dispose();
		if (annotiertesTerminalNichtTerminalItemProvider != null) annotiertesTerminalNichtTerminalItemProvider.dispose();
		if (merkmalFunktionItemProvider != null) merkmalFunktionItemProvider.dispose();
	}

}
